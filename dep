#!/usr/bin/env bash

# Useful function
# http://wiki.bash-hackers.org/howto/conffile
clean_conf () {
  # check if the file contains something we don't want
  if egrep -q -v '^#|^[^ ]*=[^;]*' "$1"; then
    echo "Config file ($1) is unclean, cleaning it..." >&2
    # filter the original to a new file
    mv $1 $1.bak
    egrep '^#|^[^ ]*=[^;&]*'  "$1.bak" > "$1"
  fi
}

# Useful function thanks to "patrik"
# https://stackoverflow.com/a/8574392
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# Make sure the required stuff exists
[ -d ~/.dep ] || mkdir -p ~/.dep
[ -f ~/.dep/config ] || touch ~/.dep/config
[ -f ~/.dep/repositories ] || {
  echo "https://github.com/cdeps/dep-repository/archive/master.tar.gz" > ~/.dep/repositories
}

# Load the user's configuration
clean_conf ~/.dep/config
source ~/.dep/config

# Let's see what to do
case "$1" in

  init)

    # Sanity check
    if [ -f .dep ]; then
      echo "Project already initialized." >&2
      echo "Remove the .dependencies file if you want to start over." >&2
      exit 1
    fi

    # Fetch the author name
    fullname=$(getent passwd $(whoami) | cut -d ':' -f 5 | cut -d ',' -f 1 )
    echo -n "Author [$fullname]: "
    read author
    [ -n "$author" ] || {
      author=$fullname
    }

    # Fetch the project name
    defaultname=$(basename $(pwd))
    echo -n "Project name [$defaultname]:"
    read projectname
    [ -n "$projectname" ] || {
      projectname=$defaultname
    }

    # Write to file
    echo "AUTHOR=$author"    >  .dep
    echo "NAME=$projectname" >> .dep
    echo "DEPS=()"           >> .dep

    # Check for git compliance
    if [ -d .git ]; then
      read -r -p "Add /lib to .gitignore? [y/N] " response
      response=${response,,}
      if [[ "$response" =~ ^(yes|y)$ ]]; then
        echo "/lib" >> .gitignore
      fi
    fi

    ;;

  add)

    # Verify the project is initialized
    [ -f .dep ] || {
      echo "The current folder isn't a project root." >&2
      echo "Initialize it by running '$0 init'." >&2
      exit 1
    }

    # Clean config if needed
    clean_conf .dep

    # Verify the fiven package name
    [ -n "$2" ] || {
      echo "No package name given." >&2
      exit 1
    }

    # Check if the given package is known
    [ -d "~/.dep/packages/$2" ] || {
      echo "Package not found" >&2
      exit 1
    }

    # No further checks yet, add it to the list
    echo "DEPS+=(\"$2\")" >> .dep
    ;;
  install)
    ;;
  help)
    cat <<EOF

LICENSE

The MIT License (MIT)

Copyright (c) 2017 Robin Bron

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

EOF
    ;;
  *)
    # Check for user-defined
    if command -v $0-$1 &>/dev/null; then
      $0-$1 "${@:2}"
    else
      echo "Usage: $0 (repo|init|add|install|help)"
      exit 1
    fi
    ;;
esac
